import java.util.Map;

void printXml(XML xml, int depth, String path) {
  String depthDisplay = "";
  for (int i = 1; i < depth; i++)
    depthDisplay += "  ";
  if (depth > 0)
    depthDisplay += "â”” ";
  println(depthDisplay + xml.getName() + " (" + path + ")");
  if (xml.hasChildren()) {
    depth++;
    path += xml.getName() + "/";
    XML[] children = xml.getChildren();
    for (XML child : children)
      printXml(child, depth, path);
  }
}

boolean isXmlExtractingTarget(String name) {
  return name.equalsIgnoreCase("rect")
    || name.equalsIgnoreCase("circle")
    || name.equalsIgnoreCase("ellipse")
    || name.equalsIgnoreCase("line")
    || name.equalsIgnoreCase("polyline")
    || name.equalsIgnoreCase("polygon")
    || name.equalsIgnoreCase("path")
    || name.equalsIgnoreCase("g");
}

void extractXml(XML xml, ArrayList extractedXmlList) {
  if (isXmlExtractingTarget(xml.getName())) {
    extractedXmlList.add(xml);
  } else if (xml.hasChildren()) {
    XML[] children = xml.getChildren();
    for (XML child : children)
      extractXml(child, extractedXmlList);
  }
}

void addXmlAttrToHm(String attrName, XML xml, HashMap hm) {
  if (xml.hasAttribute(attrName))
    hm.put(attrName, xml.getString(attrName));
}

HashMap<String, String> convertXmlToHm(XML xml) {
  HashMap<String, String> hm = new HashMap<>();
  String name = xml.getName();
  hm.put("name", name);
  addXmlAttrToHm("transform", xml, hm);
  if (name.equalsIgnoreCase("rect")) {
    addXmlAttrToHm("x", xml, hm);
    addXmlAttrToHm("y", xml, hm);
    addXmlAttrToHm("width", xml, hm);
    addXmlAttrToHm("height", xml, hm);
  } else if (name.equalsIgnoreCase("circle")) {
    addXmlAttrToHm("cx", xml, hm);
    addXmlAttrToHm("cy", xml, hm);
    addXmlAttrToHm("r", xml, hm);
  } else if (name.equalsIgnoreCase("ellipse")) {
    addXmlAttrToHm("cx", xml, hm);
    addXmlAttrToHm("cy", xml, hm);
    addXmlAttrToHm("rx", xml, hm);
    addXmlAttrToHm("ry", xml, hm);
  } else if (name.equalsIgnoreCase("line")) {
    addXmlAttrToHm("x1", xml, hm);
    addXmlAttrToHm("y1", xml, hm);
    addXmlAttrToHm("x2", xml, hm);
    addXmlAttrToHm("y2", xml, hm);
  } else if (name.equalsIgnoreCase("polyline")) {
    addXmlAttrToHm("points", xml, hm);
  } else if (name.equalsIgnoreCase("polygon")) {
    addXmlAttrToHm("points", xml, hm);
  } else if (name.equalsIgnoreCase("path")) {
    addXmlAttrToHm("d", xml, hm);
  } else if (name.equalsIgnoreCase("g")) {
  }
  return hm;
}

void addHmToList(XML[] extractedSvgArry, ArrayList<HashMap> svgHashMapList, float[] matrix) {
  for (XML svgElem : extractedSvgArry) {
    HashMap<String, String> hm = convertXmlToHm(svgElem);
    if (!hm.get("name").equals("g")) {
      svgHashMapList.add(hm);
    } else if (svgElem.hasChildren()) {
      String[] myMatrixVal = hm.get("transform").split(",");
      float[] myMatrix = new float[myMatrixVal.length];
      for (int i = 0; i < myMatrixVal.length; i++)
        myMatrix[i] = Float.parseFloat(myMatrixVal[i]);
      matrix[0] = matrix[0] * myMatrix[0] + matrix[2] * myMatrix[1] + 0
        matrix[2] = matrix[0]* myMatrix[2] + matrix[2]* myMatrix[3] + 0;
      matrix[4] = matrix[0]* myMatrix[4] + matrix[2]* myMatrix[5] + matrix[4];
      matrix[1] = matrix[1]* myMatrix[0] + matrix[3]* myMatrix[1] + 0
        matrix[3] = matrix[1]* myMatrix[2] + matrix[3]* myMatrix[3] + 0;
      matrix[5] = matrix[1]* myMatrix[4] + matrix[3]* myMatrix[5] + matrix[5];
      XML[] children = svgElem.getChildren();
      addHmToList(children, svgHashMapList, matrix);
    }
  }
}

String fileName = "sample1_ai.svg";

void setup() {
  XML svg;
  svg = loadXML(fileName);
  //printXml(svg, 0, "");
  ArrayList<XML> extractedSvgList = new ArrayList<>();
  extractXml(svg, extractedSvgList);
  ArrayList<HashMap> svgHashMapList = new ArrayList<>();
  for (XML svgElem : extractedSvgList) {
    HashMap<String, String> hm = convertXmlToHm(svgElem);
    if (!hm.get("name").equals("g")) {
      svgHashMapList.add(hm);
    } else {
      XML[] children = svgElem.getChildren();
      for (XML svgElem : extractedSvgList) {
      }
    }
  }
}

void draw() {
}
